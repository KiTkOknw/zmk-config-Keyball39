#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    my_mod_morph: mod_morph_example {
        compatible = "zmk,behavior-mod-morph";
        bindings = <&kp ESC>, <&kp GRAVE>;
        mods = <(MOD_LSFT|MOD_LGUI)>;
    };
    };

    macros {
        Hiragana: Hiragana {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "HIRAGANA";
        };
    };

    combos {
        compatible = "zmk,combos";

        delete {
            bindings = <&kp DELETE>;
            key-positions = <27 28>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <21 22>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <2 1>;
        };

        lang1 {
            bindings = <&kp LANGUAGE_1>;
            key-positions = <26 27>;
        };

        lang2 {
            bindings = <&kp LANGUAGE_2>;
            key-positions = <22 23>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <20 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp Q       &kp W           &kp E        &kp R        &kp T                        &kp Y  &kp U        &kp I         &kp O            &kp P
&mt LGUI A  &mt LEFT_ALT S  &mt LSHFT D  &mt LCTRL F  &kp G                        &kp H  &mt RCTRL J  &mt RSHIFT K  &mt RIGHT_ALT L  &mt RMETA SEMI
&kp Z       &kp X           &kp C        &kp V        &kp B                        &kp N  &kp M        &kp COMMA     &kp DOT          &kp SLASH
&mo 3      &none           &none        &mo 5        &mo 2  &kp SPACE              &kp ENTER  &mo 1                                   &tog 3
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                  &kp NUMBER_6    &kp NUMBER_7   &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
&kp F1        &kp F2        &kp F3        &kp F4        &kp F5                        &kp LEFT_ARROW  &kp DOWN       &kp UP_ARROW  &kp RIGHT     &kp F11
&kp F6        &kp F7        &kp F8        &kp F9        &kp F10                       &kp HOME        &kp PAGE_DOWN  &kp PAGE_UP   &kp END       &kp F12
&trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans                                                      &trans
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH           &kp DOLLAR    &kp PERCENT                  &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&bt BT_CLR       &kp BSLH      &kp SQT            &bt BT_SEL 2  &trans                       &kp GRAVE  &kp MINUS      &kp EQUAL     &kp LBKT              &kp RBKT
&trans           &kp PIPE      &kp DOUBLE_QUOTES  &trans        &trans                       &kp TILDE  &kp UNDER      &kp PLUS      &kp LEFT_BRACE        &kp RIGHT_BRACE
&trans           &trans        &trans             &trans        &trans       &trans          &trans   &trans                                                 &trans
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &mkp LCLK  &mkp RCLK &trans  &trans                          &trans  
            >;
        };
        mouse_layer {
            label = "MOUSE";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans                                  &none
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3                   &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &kp K_APP  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };
    };
};
